package org.kahina.core.profiler;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class KahinaLogger
{
    //a stack of starting times is stored for each Thread
    private Map<String,List<Long>> timeStacks;
    //writers for the log files generated by each thread
    private Map<String, FileWriter> fileStreams;
    
    private boolean loggingEnabled = false;
    
    private String logDir;
    
    public KahinaLogger(String logDir)
    {
        timeStacks = new HashMap<String,List<Long>>();
        this.logDir = logDir;
    }
    
    public void startMeasuring()
    {
        if (loggingEnabled)
        {
            String threadID = Thread.currentThread().getName();
            pushToStack(threadID,System.currentTimeMillis());
        }
    }
    
    public void endMeasuring(String message)
    {
        if (loggingEnabled)
        {
            long time = System.currentTimeMillis();
            String threadID = Thread.currentThread().getName();
            long startTime = popFromStack(threadID);
            int stackDepth = stackDepth(threadID);
            try
            {
                FileWriter out = fileStreams.get(threadID);
                for (int i = 0; i < stackDepth; i++)
                {
                    out.append(' ');
                    out.append(' ');
                }
                out.append((time-startTime) + " ms " + message);
            }
            catch (IOException e)
            {
                System.err.println("WARNING: IOException in KahinaLogger during file output!");
            }
        }
    }
    
    public void enableLogging()
    {
        loggingEnabled = true;
        timeStacks = new HashMap<String,List<Long>>();
    }
    
    public void disableLogging()
    {
        loggingEnabled = false;
        timeStacks = null;
    }
    
    private void pushToStack(String threadID, long startTime)
    {
        List<Long> timeStack = timeStacks.get(threadID);
        if (timeStack == null)
        {
            timeStack = new LinkedList<Long>();
            timeStacks.put(threadID, timeStack);
            String logFileName = logDir + "/" + threadID + ".log";
            try
            {
                FileWriter newOut = new FileWriter(new File(logFileName));
                fileStreams.put(threadID, newOut);
            }
            catch (IOException e)
            {
                System.err.println("WARNING: IOException in KahinaLogger while creating " + logFileName);
            }
        }
        timeStack.add(0,startTime);
    }
    
    private long popFromStack(String threadID)
    {
        List<Long> timeStack = timeStacks.get(threadID);
        if (timeStack == null) return System.currentTimeMillis();
        return timeStack.remove(0);
    }
    
    private int stackDepth(String threadID)
    {
        List<Long> timeStack = timeStacks.get(threadID);
        if (timeStack == null) return 0;
        return timeStack.size();
    }
}
