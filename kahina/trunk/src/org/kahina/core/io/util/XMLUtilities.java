package org.kahina.core.io.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class XMLUtilities 
{
	/**
	 * parse an XML file
	 * 
	 * @param f
	 *            the XML file
	 * @param validating
	 *            toggle validation
	 * @return the parsed document
	 */
	public static Document parseXMLFile(File f, boolean validating) 
    {
		try 
        {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
			factory.setValidating(validating);
			DocumentBuilder builder = factory.newDocumentBuilder(); 
			//builder.setEntityResolver(new MyEntityResolver());
			Document ldoc = builder.parse(f);
			ldoc.normalize();
			return ldoc; 
		}
        catch (SAXParseException spe) 
        {
			// Error generated by the parser
			System.err.println("\n** Parsing error" + ", line " +
			spe.getLineNumber() + ", uri " + spe.getSystemId());
	        System.err.println("   " + spe.getMessage());
	            		        
		}
        catch (SAXException sxe) 
        {
			// Error generated during parsing
			System.err.println("   " + sxe.getMessage());
		} 
        catch (ParserConfigurationException e) 
        {
			// Parser with specified options can't be built	
			System.err.println("   " + e.getMessage());
		} 
        catch (IOException e) 
        {
			// I/O error
			System.err.println("   " + e.getMessage());
			//e.printStackTrace();
		}
		return null;
	}
	
	public static void writeXML(Document document, String outfile, String dtd, boolean system) 
    {
		try 
        {
			DOMSource domSource = new DOMSource(document);
			StringWriter writer = new StringWriter();
			StreamResult result = new StreamResult(writer);
			TransformerFactory tf = TransformerFactory.newInstance();
			tf.setAttribute("indent-number", new Integer(2));
			
			Transformer transformer = tf.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			if (system) 
            {
				transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, dtd);
			} 
            else 
            {
				transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, dtd);
			}
			
			transformer.transform(domSource, result);
			String stringResult = writer.toString();
			
			if (outfile.equals("stdout")) 
            {
				System.out.println(stringResult);
			} 
            else 
            {
				FileWriter fw = new FileWriter(outfile);
				fw.write(stringResult);
				fw.close();
			}
			
		} 
        catch (TransformerException e) 
        {
			System.err.println("   " + e.getMessage());
		} 
        catch (IOException e) 
        {
			// I/O error
			System.err.println("   " + e.getMessage());		
		} 
        catch (Exception e)
        {
			System.err.println("   " + e.getMessage());		
		}
	}
	
}
