/** 
* Contains the basic Kahina event system and the core functionality of the breakpoint system.
* <p> 
* The Kahina event system is built around controllers, which process and distribute
* event objects generated by various components, and listeners, which can register
* with a controller for events of a given type, and provide callback methods
* which a controller can call to distribute events to interested parties.
* <p>
* A {@link org.kahina.core.control.KahinaController} is used to register listeners,
* receives newly generated events, and distributes these to interested listeners.
* A class implementing the {@link org.kahina.core.control.KahinaListener} interface
* is allowed to register with a KahinaController for interesting event types, 
* then receiving any events of these types via a callback function.
* <p>
* All event types processed by a KahinaController need to inherit from
* {@link org.kahina.core.control.KahinaEvent}, which forces every KahinaEvent
* to provide some type information.
* For convenience, some common event types are predefined as string constants 
* in {@link org.kahina.core.control.KahinaEventTypes}.
* Four very common event types are already implemented in the org.kahina.core package.
* The most important event type is the {@link org.kahina.core.control.KahinaControlEvent},
* which is used to hand on user commands from GUI components to other parts of the system.
* A {@link org.kahina.core.control.KahinaWarnEvent} is used to relay the information
* that a warning should be displayed.
* To inform all components that a session should be saved or is being loaded,
* a {@link org.kahina.core.control.KahinaSessionEvent} is issued.
* A {@link org.kahina.core.control.KahinaSystemEvent} is used to handle other global operations
* such as a reapplication of all breakpoint patterns, a node count, or a user command to quit.
* <p>
* The breakpoint system is based on patterns which can be defined on step data,
* and possibly configurations of steps which are arranged in a tree.
* The event system distributes the news when such patterns match,
* allowing other components to react accordingly.
* Breakpoints can be associated with control actions such as stopping
* the monitored process, making a particular decision at a decision point,
* or issuing warnings.
* <p>
* Breakpoints are represented by {@link org.kahina.core.control.KahinaBreakpoint} objects,
* and can be generated using convenience methods in {@link org.kahina.core.control.KahinaBreakpointFactory}.
* Despite their name, breakpoints are used for much more comprehensive control automation
* than their counterparts in other debugging systems. 
* The type of a breakpoint is defined by giving it one of the constant values in {@link org.kahina.core.control.KahinaBreakpointType}
* (some of these types are specific to logic programming, MOVE THEM!).
* <p>
* @since 1.0 
*/ 

package org.kahina.core.control;